{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_ALPHABETICALLY","SORT_BY_LENGTH","App","useState","sortCondition","setSortCondition","reverseGoods","setReverseGoods","visibleGoods","goods","sortedGoods","sort","good1","good2","localeCompare","length","reverse","sortGoods","resetButtonIsVisible","className","type","onClick","classNames","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,MACtBC,EAAiB,MA4BhB,IAAMC,EAAM,WACjB,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EA5BR,SAAmBC,EAAnB,GAA4D,IAAhCL,EAA+B,EAA/BA,cAAeE,EAAgB,EAAhBA,aACnCI,EAAW,YAAOD,GAqBxB,OAnBIL,GACFM,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,cAAcD,GAE7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,GACFI,EAAYM,UAGPN,EAMcO,CAAUlB,EAAiB,CAC9CK,gBACAE,iBAGIY,EAAuBd,GAAiBE,EAM9C,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMhB,EAAiBL,IAChCmB,UAAWG,IAAW,oBAAqB,CACzC,WAAYlB,IAAkBJ,IAJlC,iCAUA,wBACEoB,KAAK,SACLC,QAAS,kBAAMhB,EAAiBJ,IAChCkB,UAAWG,IAAW,oBAAqB,CACzC,WAAYlB,IAAkBH,IAJlC,4BAUA,wBACEmB,KAAK,SACLC,QAAS,kBA7BML,EArCT,WAsCZT,GAAgB,SAAAgB,GAAI,OAAKA,IAASP,EAAU,GAAKA,KADnD,IAAuBA,GA8BfG,UAAWG,IAAW,oBAAqB,CACzC,WApEI,QAoEQhB,IAJhB,qBAUCY,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPhB,EAAiB,IACjBE,EAAgB,KALpB,sBAaJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC3GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.36ab983e.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_ALPHABETICALLY = 'alp';\nconst SORT_BY_LENGTH = 'lng';\nconst REVERSE = 'rev';\n\nfunction sortGoods(goods, { sortCondition, reverseGoods }) {\n  const sortedGoods = [...goods];\n\n  if (sortCondition) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortCondition) {\n        case SORT_ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        case SORT_BY_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseGoods) {\n    sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n}\n\nexport const App = () => {\n  const [sortCondition, setSortCondition] = useState('');\n  const [reverseGoods, setReverseGoods] = useState('');\n  const visibleGoods = sortGoods(goodsFromServer, {\n    sortCondition,\n    reverseGoods,\n  });\n\n  const resetButtonIsVisible = sortCondition || reverseGoods;\n\n  function handleReverse(reverse) {\n    setReverseGoods(prev => (prev === reverse ? '' : reverse));\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortCondition(SORT_ALPHABETICALLY)}\n          className={classNames('button is-warning', {\n            'is-light': sortCondition !== SORT_ALPHABETICALLY,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortCondition(SORT_BY_LENGTH)}\n          className={classNames('button is-success', {\n            'is-light': sortCondition !== SORT_BY_LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => handleReverse(REVERSE)}\n          className={classNames('button is-warning', {\n            'is-light': reverseGoods !== REVERSE,\n          })}\n        >\n          Reverse\n        </button>\n\n        {resetButtonIsVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortCondition('');\n              setReverseGoods('');\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}